#include <stdio.h>
#define MAX 50
typedef struct {
    int u, v, p;
}Edge;
typedef struct {
    int n, m;
    Edge edges[MAX];
}Graph;

void init_graph(Graph* pG, int n) {
    pG->n=n;
    pG->m=0;
}
// int adjacent(Graph* pG, int u, int v) {
//     for(int i=0; i<pG->m; i++) {
//         if((pG->edges[i].u==u && pG->edges[i].v==v) ||
//         (pG->edges[i].u==v && pG->edges[i].v==u)) return 1;
//     }
//     return 0;
// }
int adjacent(Graph* pG, int u, int v) {
    for(int i=0; i<pG->m; i++) {
        if((pG->edges[i].u==u && pG->edges[i].v==v)) return 1;
    }
    return 0;
}
void add_edge(Graph* pG, int u, int v) {
    pG->edges[pG->m].u=u;
    pG->edges[pG->m].v=v;
    // pG->edges[pG->m].p=p;
    pG->m++;
}
int min(int a, int b) {
    return (a>b)? b:a;
}
int num[MAX], min_num[MAX], k=1, on_stack[MAX], stack[MAX], top=-1;
int cntTrustPP=0;
void SCC(Graph* pG, int u) {
    stack[++top]=u;
    on_stack[u]=1;
    num[u]=k; min_num[u]=k; k++;
    for(int v=1; v<=pG->n; v++) {
        if(adjacent(pG, u, v)) {
            if(num[v]==-1) {
                SCC(pG, v);
                min_num[u]=min(min_num[u],min_num[v]);
            } else if(on_stack[v]) {
                min_num[u]= min(min_num[u],num[v]);
            }
        }
    }
    if(min_num[u]==num[u]) {
        int v;

        do{
            v= stack[top--];
            on_stack[v]=0;
            // printf("%d ", v);
            
        }while(v!=u);
         cntTrustPP++;
    }
}

int main() {
	int n, m, u, v;
	scanf("%d %d", &n, &m);
	Graph G; init_graph(&G, n);
	for(int i=1; i<=m; i++) {
	    scanf("%d %d", &u, &v);
	    add_edge(&G, u, v);
	}
	for(int i=1; i<=n; i++) {
	    num[i]=-1;
	    on_stack[i]=0;
	}
	for(int i=1; i<=n; i++) {
	    if(num[i]==-1) SCC(&G, i);
	}
    // if(nb_cnt==1) printf("OKIE");
    printf("%d",cntTrustPP);
	return 0;
}

