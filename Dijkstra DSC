#include <stdio.h>
#define oo 999999
#define MAX 50

typedef struct {
    int u, v, w;
} Edge;

typedef struct {
    int n, m;
    Edge edges[MAX];
} Graph;

void init_graph(Graph* pG, int n) {
    pG->n = n;
    pG->m = 0;
}

// Thêm cạnh với trọng số w
void add_edge(Graph* pG, int u, int v, int w) {
    pG->edges[pG->m].u = u;
    pG->edges[pG->m].v = v;
    pG->edges[pG->m].w = w;
    pG->m++;
}

int p[MAX], pi[MAX], mark[MAX];

// Hàm tìm đỉnh chưa được chọn có pi nhỏ nhất
int extract_min(int n) {
    int min_pi = oo;
    int u = -1;
    for(int i = 1; i <= n; i++) {
        if(mark[i] == 0 && pi[i] < min_pi) {
            min_pi = pi[i];
            u = i;
        }
    }
    return u;
}

void Dj(Graph* pG, int s) {
    int n = pG->n;
    for(int u = 1; u <= n; u++) {
        pi[u] = oo;
        mark[u] = 0;
        p[u] = -1;
    }
    pi[s] = 0;

    for(int i = 1; i <= n; i++) {
        int u = extract_min(n);
        if(u == -1) break; // Không còn đỉnh nào để chọn
        mark[u] = 1;

        // Duyệt tất cả các cạnh để tìm các cạnh xuất phát từ u
        for(int e = 0; e < pG->m; e++) {
            if(pG->edges[e].u == u) {
                int v = pG->edges[e].v;
                int w = pG->edges[e].w;
                if(!mark[v] && pi[u] + w < pi[v]) {
                    pi[v] = pi[u] + w;
                    p[v] = u;
                }
            }
            // Nếu đồ thị vô hướng, có thể thêm:
            /*
            if(pG->edges[e].v == u) {
                int v = pG->edges[e].u;
                int w = pG->edges[e].w;
                if(!mark[v] && pi[u] + w < pi[v]) {
                    pi[v] = pi[u] + w;
                    p[v] = u;
                }
            }
            */
        }
    }
}

int main() {
    Graph G;
    int n, m, u, v, w;

    scanf("%d%d", &n, &m);
    init_graph(&G, n);

    for(int i = 0; i < m; i++) {
        scanf("%d%d%d", &u, &v, &w);
        add_edge(&G, u, v, w);
    }

    Dj(&G, 1);

    for(int i = 1; i <= n; i++) {
        printf("pi[%d] = %d, p[%d] = %d\n", i, pi[i], i, p[i]);
    }

    return 0;
}
